"""
Visualization utilities for survival data.

This module provides functions to visualize survival data generated by gen_surv,
including Kaplan-Meier survival curves and other commonly used plots in survival analysis.
"""

from typing import Dict, List, Optional, Tuple, Union, Any
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.axes import Axes


def plot_survival_curve(
    data: pd.DataFrame,
    time_col: str = "time",
    status_col: str = "status",
    group_col: Optional[str] = None,
    confidence_intervals: bool = True,
    title: str = "Kaplan-Meier Survival Curve",
    figsize: Tuple[float, float] = (10, 6),
    ci_alpha: float = 0.2,
) -> Tuple[Figure, Axes]:
    """
    Plot Kaplan-Meier survival curves from simulated data.

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame containing the survival data.
    time_col : str, default="time"
        Name of the column containing event/censoring times.
    status_col : str, default="status"
        Name of the column containing event indicators (1=event, 0=censored).
    group_col : str, optional
        Name of the column to use for stratification (creates separate curves).
    confidence_intervals : bool, default=True
        Whether to display confidence intervals around the survival curves.
    title : str, default="Kaplan-Meier Survival Curve"
        Plot title.
    figsize : tuple, default=(10, 6)
        Figure size (width, height) in inches.
    ci_alpha : float, default=0.2
        Transparency level for confidence interval bands.

    Returns
    -------
    fig : Figure
        Matplotlib figure object.
    ax : Axes
        Matplotlib axes object.

    Examples
    --------
    >>> from gen_surv import generate
    >>> from gen_surv.visualization import plot_survival_curve
    >>>
    >>> # Generate data
    >>> df = generate(model="cphm", n=100, model_cens="uniform", cens_par=1.0, beta=0.5, covar=2.0)
    >>>
    >>> # Create a categorical group based on covariate
    >>> df["group"] = pd.cut(df["covariate"], bins=2, labels=["Low", "High"])
    >>>
    >>> # Plot survival curves by group
    >>> fig, ax = plot_survival_curve(df, group_col="group")
    >>> plt.show()
    """
    # Import lifelines here to avoid making it a hard dependency
    try:
        from lifelines import KaplanMeierFitter
        from lifelines.plotting import add_at_risk_counts
    except ImportError as exc:
        raise ImportError(
            "This function requires the lifelines package. "
            "Install it with: pip install lifelines"
        ) from exc

    fig, ax = plt.subplots(figsize=figsize)

    # Create separate KM curves for each group (if specified)
    if group_col is not None:
        groups = data[group_col].unique()
        cmap = plt.get_cmap("tab10")
        colors = [cmap(i) for i in range(len(groups))]

        for i, group in enumerate(groups):
            mask = data[group_col] == group
            group_data = data[mask]

            kmf = KaplanMeierFitter()
            kmf.fit(
                group_data[time_col],
                group_data[status_col],
                label=f"{group_col}={group}",
            )

            kmf.plot_survival_function(
                ax=ax, ci_show=confidence_intervals, color=colors[i], ci_alpha=ci_alpha
            )

        # Add at-risk counts below the plot
        add_at_risk_counts(kmf, ax=ax)
    else:
        # Single KM curve for all data
        kmf = KaplanMeierFitter()
        kmf.fit(data[time_col], data[status_col])

        kmf.plot_survival_function(
            ax=ax, ci_show=confidence_intervals, ci_alpha=ci_alpha
        )

        # Add at-risk counts below the plot
        add_at_risk_counts(kmf, ax=ax)

    # Customize plot appearance
    ax.set_title(title)
    ax.set_xlabel("Time")
    ax.set_ylabel("Survival Probability")
    ax.grid(alpha=0.3)
    ax.set_ylim(0, 1.05)

    plt.tight_layout()
    return fig, ax


def plot_hazard_comparison(
    models: Dict[str, pd.DataFrame],
    time_col: str = "time",
    status_col: str = "status",
    title: str = "Hazard Function Comparison",
    figsize: Tuple[float, float] = (10, 6),
    bandwidth: float = 0.5,
) -> Tuple[Figure, Axes]:
    """
    Compare hazard functions from multiple generated datasets.

    Parameters
    ----------
    models : dict
        Dictionary mapping model names to their respective DataFrames.
    time_col : str, default="time"
        Name of the column containing event/censoring times.
    status_col : str, default="status"
        Name of the column containing event indicators (1=event, 0=censored).
    title : str, default="Hazard Function Comparison"
        Plot title.
    figsize : tuple, default=(10, 6)
        Figure size (width, height) in inches.
    bandwidth : float, default=0.5
        Bandwidth parameter for kernel density estimation of the hazard function.

    Returns
    -------
    fig : Figure
        Matplotlib figure object.
    ax : Axes
        Matplotlib axes object.

    Examples
    --------
    >>> from gen_surv import generate
    >>> from gen_surv.visualization import plot_hazard_comparison
    >>>
    >>> # Generate data from multiple models
    >>> models = {
    >>>     "CPHM": generate(model="cphm", n=100, model_cens="uniform", cens_par=1.0, beta=0.5, covar=2.0),
    >>>     "AFT Weibull": generate(model="aft_weibull", n=100, beta=[0.5], shape=1.5, scale=2.0,
    >>>                            model_cens="uniform", cens_par=1.0)
    >>> }
    >>>
    >>> # Compare hazard functions
    >>> fig, ax = plot_hazard_comparison(models)
    >>> plt.show()
    """
    # Import lifelines here to avoid making it a hard dependency
    try:
        from lifelines import NelsonAalenFitter
    except ImportError as exc:
        raise ImportError(
            "This function requires the lifelines package. "
            "Install it with: pip install lifelines"
        ) from exc

    fig, ax = plt.subplots(figsize=figsize)

    for model_name, df in models.items():
        naf = NelsonAalenFitter()
        naf.fit(df[time_col], df[status_col])

        # Get smoothed hazard estimate
        hazard = naf.smoothed_hazard_(bandwidth=bandwidth)

        # Plot hazard function
        ax.plot(hazard.index, hazard.values, label=model_name, alpha=0.8)

    # Customize plot appearance
    ax.set_title(title)
    ax.set_xlabel("Time")
    ax.set_ylabel("Hazard Rate")
    ax.grid(alpha=0.3)
    ax.legend()

    plt.tight_layout()
    return fig, ax


def plot_covariate_effect(
    data: pd.DataFrame,
    covariate_col: str,
    time_col: str = "time",
    status_col: str = "status",
    n_groups: int = 3,
    title: str = "Effect of Covariate on Survival",
    figsize: Tuple[float, float] = (10, 6),
    ci_alpha: float = 0.2,
) -> Tuple[Figure, Axes]:
    """
    Visualize the effect of a continuous covariate on survival by discretizing it.

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame containing the survival data.
    covariate_col : str
        Name of the covariate column to visualize.
    time_col : str, default="time"
        Name of the column containing event/censoring times.
    status_col : str, default="status"
        Name of the column containing event indicators (1=event, 0=censored).
    n_groups : int, default=3
        Number of groups to divide the covariate into (e.g., 3 for tertiles).
    title : str, default="Effect of Covariate on Survival"
        Plot title.
    figsize : tuple, default=(10, 6)
        Figure size (width, height) in inches.
    ci_alpha : float, default=0.2
        Transparency level for confidence interval bands.

    Returns
    -------
    fig : Figure
        Matplotlib figure object.
    ax : Axes
        Matplotlib axes object.

    Examples
    --------
    >>> from gen_surv import generate
    >>> from gen_surv.visualization import plot_covariate_effect
    >>>
    >>> # Generate data with a continuous covariate
    >>> df = generate(model="cphm", n=200, model_cens="uniform", cens_par=1.0, beta=0.5, covar=2.0)
    >>>
    >>> # Visualize the effect of the covariate on survival
    >>> fig, ax = plot_covariate_effect(df, covariate_col="covariate", n_groups=3)
    >>> plt.show()
    """
    # Add a categorical version of the covariate
    group_labels = [f"Q{i + 1}" for i in range(n_groups)]
    data = data.copy()
    data["_group"] = pd.qcut(data[covariate_col], q=n_groups, labels=group_labels)

    # Get the median value of each group for the legend
    group_medians = data.groupby("_group")[covariate_col].median()

    # Create more informative labels
    label_map = {
        group: f"{group} ({covariate_col}≈{median:.2f})"
        for group, median in group_medians.items()
    }

    data["_label"] = data["_group"].map(label_map)

    # Create the plot
    fig, ax = plot_survival_curve(
        data=data,
        time_col=time_col,
        status_col=status_col,
        group_col="_label",
        confidence_intervals=True,
        title=title,
        figsize=figsize,
        ci_alpha=ci_alpha,
    )

    return fig, ax


def describe_survival(
    data: pd.DataFrame, time_col: str = "time", status_col: str = "status"
) -> pd.DataFrame:
    """
    Generate a summary of survival data including median survival time,
    event counts, and other descriptive statistics.

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame containing the survival data.
    time_col : str, default="time"
        Name of the column containing event/censoring times.
    status_col : str, default="status"
        Name of the column containing event indicators (1=event, 0=censored).

    Returns
    -------
    pd.DataFrame
        Summary statistics dataframe.

    Examples
    --------
    >>> from gen_surv import generate
    >>> from gen_surv.visualization import describe_survival
    >>>
    >>> # Generate data
    >>> df = generate(model="cphm", n=200, model_cens="uniform", cens_par=1.0, beta=0.5, covar=2.0)
    >>>
    >>> # Get survival summary
    >>> summary = describe_survival(df)
    >>> print(summary)
    """
    # Import lifelines here to avoid making it a hard dependency
    try:
        from lifelines import KaplanMeierFitter
    except ImportError as exc:
        raise ImportError(
            "This function requires the lifelines package. "
            "Install it with: pip install lifelines"
        ) from exc

    n_total = len(data)
    n_events = data[status_col].sum()
    n_censored = n_total - n_events
    event_rate = n_events / n_total

    # Calculate median and other percentiles
    kmf = KaplanMeierFitter()
    kmf.fit(data[time_col], data[status_col])
    median = kmf.median_survival_time_

    # Time ranges
    time_min = data[time_col].min()
    time_max = data[time_col].max()
    time_mean = data[time_col].mean()

    # Create summary DataFrame
    summary = pd.DataFrame(
        {
            "Metric": [
                "Total Observations",
                "Number of Events",
                "Number Censored",
                "Event Rate",
                "Median Survival Time",
                "Min Time",
                "Max Time",
                "Mean Time",
            ],
            "Value": [
                n_total,
                n_events,
                n_censored,
                f"{event_rate:.2%}",
                f"{median:.4f}",
                f"{time_min:.4f}",
                f"{time_max:.4f}",
                f"{time_mean:.4f}",
            ],
        }
    )

    return summary
